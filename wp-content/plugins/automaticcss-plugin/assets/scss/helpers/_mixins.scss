@import "../dashboard/breakpoints";
@import "../modules/flex-grid/flex-grid-mixins";
@import "../modules/grid/grid-mixins";
@import "../modules/gap/gap-mixins";
@import "../modules/buttons/button-mixins";
@import "../modules/accessibility/accessibility-mixins";
@import "../modules/text/text-mixins";

// MAX WIDTH
@mixin breakpoint($extension) {
  @media (max-width: map-get($breakpoints, $extension)) {
    @content;
  }
}

// MIN WIDTH
@mixin breakpoint-up($extension) {
  @media (min-width: map-get($breakpoints, $extension)) {
    @content;
  }
}

// Padding
@mixin fluid-padding($pure, $min, $max) {
  padding: #{$pure};
  padding: fluidCalc($min, $max);
  padding: fluidClamp($min, $max);
}

@mixin map-get-padding($extension) {
  padding: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  padding: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  padding: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

@mixin fluid-section-padding($pure, $min, $max) {
  padding: #{$pure} append-rem($section-padding-x-pure);
  padding: fluidCalc($min, $max)
    fluidCalc($section-padding-x-min, $section-padding-x-max);
  padding: fluidClamp($min, $max)
    fluidClamp($section-padding-x-min, $section-padding-x-max);
}

@mixin map-get-section-spacing($extension) {
  padding: map-get(
      map-get($sectionSpacing, pure),
      section-space-#{$extension}-pure
    )
    append-rem($section-padding-x-pure);
  padding: map-get(
      map-get($sectionSpacing, calc),
      section-space-#{$extension}-calc
    )
    fluidCalc($section-padding-x-min, $section-padding-x-max);
  padding: map-get(
      map-get($sectionSpacing, clamp),
      section-space-#{$extension}-clamp
    )
    fluidClamp($section-padding-x-min, $section-padding-x-max);
}

@mixin map-get-header-padding($extension) {
  padding: map-get(map-get($spacing, pure), space-#{$extension}-pure) 0;
  padding: map-get(map-get($spacing, calc), space-#{$extension}-calc) 0;
  padding: map-get(map-get($spacing, clamp), space-#{$extension}-clamp) 0;
}


// Owl Spacing
@mixin map-get-owl($extension) {
  margin-block-start: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  margin-block-start: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  margin-block-start: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

// Gap
@mixin map-get-gap($extension) {
  gap: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  gap: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  gap: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

// Columns Gap
@mixin map-get-col-gap($extension) {
  -moz-column-gap: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  column-gap: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  -moz-column-gap: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  column-gap: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  -moz-column-gap: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
  column-gap: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

// Platform & Feature Options

@mixin if-builders-off {
  @if $option-bricks == off and $option-oxygen == off {
    @content;
  }
}

@mixin if-woocommerce-on {
  @if $option-woocommerce == on {
    @content;
  }
}

@mixin if-smooth-scrolling-on {
  @if $option-smooth-scrolling == on {
    @content;
  }
}

@mixin if-wsform-on {
  @if $option-wsform == on {
    @content;
  }
}

@mixin if-bricks-on {
  @if $option-bricks == on {
    @content;
  }
}

@mixin if-bricks-off {
  @if $option-bricks == off {
    @content;
  }
}

@mixin if-oxygen-off {
  @if $option-oxygen == off {
    @content;
  }
}

// Site Defaults

@mixin site-defaults {
  @if $option-boxed-layout == on {
    html {
      background-color: $device-bg-color;
    }
  }

  body {
    font-size: var(--text-m);
    line-height: $base-text-lh;
    background-color: $body-bg-color;
    color: $body-color;
    @if $option-boxed-layout == on {
      inline-size: 100%;
      max-inline-size: $body-max-width;
      box-shadow: $body-box-shadow;
      border-color: $body-border-color;
      border-style: $body-border-style;
      border-width: $body-border-width;
      border-radius: $body-border-radius;
      margin-block-start: #{$body-margin-top} !important;
      margin-inline: auto !important;
    }
  }

  @if $option-bricks == on {
    body.bricks-is-frontend,
    body:not(.bricks-is-frontend) {
      color: $body-color;
    }
  }

  // Default Link Style

  @if $option-link-default-not == off {
    // Define link style if no user exclusion rules present
    body a {
      color: $link-color;
      font-weight: $link-weight;
      -webkit-text-decoration: $link-decoration;
      text-decoration: $link-decoration;
      text-underline-offset: $link-underline-offset;
  
      &:hover {
        color: $link-color-hover;
        @if $link-decoration-hover != "inherit" {
          -webkit-text-decoration: $link-decoration-hover;
          text-decoration: $link-decoration-hover;
        }
      }
    }
   } @else {
     // Add user exclusions rules if they exist
      body a:not(#{$link-default-not}) {
        color: $link-color;
        font-weight: $link-weight;
        -webkit-text-decoration: $link-decoration;
        text-decoration: $link-decoration;
        text-underline-offset: $link-underline-offset;
    
        &:hover {
          color: $link-color-hover;
          @if $link-decoration-hover != "inherit" {
            -webkit-text-decoration: $link-decoration-hover;
            text-decoration: $link-decoration-hover;
          }
        }
    }
  }

  h1 {
    font-size: var(--h1);
    line-height: $h1-lh;
    color: $h1-color;
    max-inline-size: $heading-line-length;
  }
  h2 {
    font-size: var(--h2);
    line-height: $h2-lh;
    color: $h2-color;
    max-inline-size: $h2-line-length;
  }
  h3 {
    font-size: var(--h3);
    line-height: $h3-lh;
    color: $h3-color;
    max-inline-size: $h3-line-length;
  }
  h4 {
    font-size: var(--h4);
    line-height: $h4-lh;
    color: $h4-color;
    max-inline-size: $h4-line-length;
  }
  h5 {
    font-size: var(--h5);
    line-height: $h5-lh;
    color: $h5-color;
    max-inline-size: $h5-line-length;
  }
  h6 {
    font-size: var(--h6);
    line-height: $h6-lh;
    color: $h6-color;
    max-inline-size: $h6-line-length;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    a {
      font-weight: inherit;
      text-decoration: inherit;
      color: currentcolor;
      text-underline-offset: $link-underline-offset;

      &:hover {
        color: currentcolor;
      }
    }
  }

    p {
      max-inline-size: $text-line-length;
    }
  }

// Generate code at all breakpoints

@mixin at-each-breakpoint {
  @each $breakpoint, $value in $breakpoints {
    @include breakpoint($breakpoint) {
      @content;
    }
  }
}

// Overlays

@mixin overlay($overlay-bg: var(--black-trans-60), $overlay-opacity: null, $overlay-bg-image: null) {
  position: relative;
  isolation: isolate;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;

    // Need to check if there's a background image declared or not so we can
    // create a valid background string

    @if not $overlay-bg-image {
      background: var(--overlay-bg, $overlay-bg);
    } @else {
      background: var(--overlay-bg, $overlay-bg), var(--overlay-bg-image, $overlay-bg-image);
    }

    opacity: var(--overlay-opacity, $overlay-opacity);
  }

}

// Clickable Parent for Builders (Internal)

@mixin load-clickable-parent($target) {
    .clickable-parent:not(a) {
      position: static;

      a {
        position: static;
      }

      > a::after {
        content: "";
        position: absolute;
        inset: 0;
        cursor: pointer !important;
        display: flex;
      }
    }

    button.clickable-parent,
    a.clickable-parent {
      position: static;

      &::after {
        content: "";
        position: absolute;
        inset: 0;
        cursor: pointer !important;
        display: flex;
      }
    }
    // Remove effect from page builder target
    #{$target} a.clickable-parent::after,
    #{$target} .clickable-parent > a::after {
      content: '';
      position: relative;
    }
  }

// Clickable Parent (for Users)

@mixin clickable-parent {
  position: static;

    &::after {
      content: "";
      position: absolute;
      inset: 0;
      cursor: pointer !important;
      display: flex;
    }
}

///// Grid

@mixin grid($columns, $rows, $gap) {
  display: grid;
  grid-template-columns: $columns;
  grid-template-rows: $rows;
  gap: $gap;
}

// @mixin auto-grid() {
//   display: grid;
//   grid-template-columns: null;
//   grid-template-rows: null;
//   gap: null;
// }

//// Animations

@mixin delay-children($child-count: 1, $delay: 100ms) {
  @for $i from 1 through $child-count {
      &:nth-child(#{$i}) {
          animation-delay: calc(#{$delay} * #{$i});
      }
  }
}